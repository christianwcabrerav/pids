spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=false
# update, create-drop
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost/bank
spring.datasource.username=postgres
spring.datasource.password=amy190915
# Cuando levante la aplicacion:
# El primero que se carga es el relacionado a CORS
# El segundo que se carga es el Spring Security,
security.oauth2.resource.filter-order=3
# Tutorial relacionado a JWT
#https://github.com/nydiarra/springboot-jwt
# Cadena aleatoria
security.signing-key=MaYzkSjmkzPC57L
# Mecanismo de encriptacion
security.encoding-strength=256
# Nombre que es descriptivo a la aplicacion
security.security-realm=Spring Boot JWT
# Estos son los puntos mas importantes
# Identificar la aplicacion que esta generando los tokens(username)
security.jwt.client-id=mitomediapp
# Clave de la generacion de los tokens(password)
security.jwt.client-secret=mito89codex
# Es password porque vamos a generar tokens para acceder a los recursos de la aplicacion
security.jwt.grant-type=password
# Los recursos van a ser para obtener alguna informacion de la aplicacion
security.jwt.scope-read=read
# Los recursos van a hacer de escritura para registrar, actualizar algo de la aplicacion
security.jwt.scope-write=write
# Nombre que se quiere dar a la aplicacion
security.jwt.resource-ids=mitoresourceid
# Tiempo de via del token
security.jwt.token.validaty.seconds=6000

##################################################
# Desacoplando responsabilidades con el websocket
##################################################
websocket.server.url=http://localhost:5000
